<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Le Baron de Charlus</title><link>https://lebaron.sh/post/</link><description>Recent content in Posts on Le Baron de Charlus</description><generator>Hugo</generator><language>en-us</language><copyright>Le Baron de Charlus</copyright><lastBuildDate>Wed, 09 Aug 2023 13:10:42 +0200</lastBuildDate><atom:link href="https://lebaron.sh/post/index.xml" rel="self" type="application/rss+xml"/><item><title>B, an ugly Bitwarden CLI</title><link>https://lebaron.sh/p/b-an-ugly-bitwarden-cli/</link><pubDate>Wed, 09 Aug 2023 13:10:42 +0200</pubDate><guid>https://lebaron.sh/p/b-an-ugly-bitwarden-cli/</guid><description>&lt;br>
&lt;p align="center">
 &lt;img src="https://lebaron.sh/images/b.png" width="30%">
&lt;/p>
&lt;p>Yes, yes, yes, I know… I don&amp;rsquo;t like graphical interfaces so sometimes I like to make some TUI tools, and sometimes they can be ugly too…&lt;/p>
&lt;p>I was tired of wasting time clicking each time on the web extension or on the client, of having to systematically enter my login details, of not having a quick access directly accessible in shortcuts, etc.&lt;/p>
&lt;p>So, living in a terminal 90% of the time, I thought I&amp;rsquo;d do a quick script to put me out of my misery.&lt;/p></description></item><item><title>Manage your Zellij sessions</title><link>https://lebaron.sh/p/manage-your-zellij-sessions/</link><pubDate>Tue, 12 Jul 2022 12:22:42 +0200</pubDate><guid>https://lebaron.sh/p/manage-your-zellij-sessions/</guid><description>&lt;img src="https://lebaron.sh/images/zellij.png" width="50%">
&lt;p>Quick post on great &lt;code>Zellij&lt;/code> tool I&amp;rsquo;ve been using for some weeks now in &lt;code>Tmux&lt;/code> replacement.&lt;/p>
&lt;p>I&amp;rsquo;ve been missing to manage my &lt;code>sessions&lt;/code> on multiplexer init while starting a new &lt;code>shell&lt;/code> or &lt;code>terminal&lt;/code> so I&amp;rsquo;ve ended creating a quick feature to manage it on startup.&lt;/p>
&lt;h3 id="dependencies">Dependencies&lt;/h3>
&lt;p>You need &lt;a href="https://github.com/lotabout/skim" target="_blank">sk&lt;/a> binary installed and in your &lt;code>$PATH&lt;/code> and of course &lt;a href="https://github.com/zellij-org/zellij/" target="_blank">zellij&lt;/a>.&lt;/p>
&lt;h3 id="demo">Demo&lt;/h3>
&lt;p>&lt;img src="https://lebaron.sh/images/sessions.gif" alt="Zellij Sessions">&lt;/p>
&lt;h3 id="installation">Installation&lt;/h3>
&lt;p>Add this block at the end of your &lt;code>$SHELLrc&lt;/code> file &lt;i>(tested with BASH and ZSH)&lt;/i> :&lt;/p></description></item><item><title>Shloader - A Modern Shell Loader</title><link>https://lebaron.sh/p/shloader-a-modern-shell-loader/</link><pubDate>Sat, 25 Jun 2022 18:03:17 +0200</pubDate><guid>https://lebaron.sh/p/shloader-a-modern-shell-loader/</guid><description>&lt;p>&lt;img src="https://lebaron.sh/images/shloader.png" alt="Shloader">&lt;/p>
&lt;ol>
&lt;li>&lt;a href="#why">Why&lt;/a>&lt;/li>
&lt;li>&lt;a href="#features">Features&lt;/a>&lt;/li>
&lt;li>&lt;a href="#preview">Preview&lt;/a>&lt;/li>
&lt;li>&lt;a href="#templating">Templating&lt;/a>&lt;/li>
&lt;li>&lt;a href="#usage">Usage&lt;/a>&lt;/li>
&lt;li>&lt;a href="#parsing-arguments">Parsing Arguments&lt;/a>&lt;/li>
&lt;li>&lt;a href="#shell-configurations">Shell Configurations&lt;/a>&lt;/li>
&lt;li>&lt;a href="#trap-error-and-exit">Trap Error and Exit&lt;/a>&lt;/li>
&lt;li>&lt;a href="#display-loader">Display Loader&lt;/a>&lt;/li>
&lt;li>&lt;a href="#call-loader">Call Loader&lt;/a>&lt;/li>
&lt;li>&lt;a href="#script-library-integration">Scrip Library Integration&lt;/a>&lt;/li>
&lt;li>&lt;a href="#conclusion">Conclusion&lt;/a>&lt;/li>
&lt;/ol>
&lt;h1 id="why">Why&lt;/h1>
&lt;p>I&amp;rsquo;ve been recently doing some old shell scripts to quickly automatize and distribute actions that were made manually, I&amp;rsquo;ll write a post on it later. For now I&amp;rsquo;d like to share with you how I&amp;rsquo;ve been coding a 100% shell loader library to use it in my scripts.&lt;/p></description></item><item><title>Ultimate Python development environment configuration</title><link>https://lebaron.sh/p/ultimate-python-development-environment-configuration/</link><pubDate>Fri, 10 Jun 2022 08:12:12 +0200</pubDate><guid>https://lebaron.sh/p/ultimate-python-development-environment-configuration/</guid><description>&lt;p>&lt;img src="https://lebaron.sh/images/ultimate-python.png" alt="Ultimate Python">&lt;/p>
&lt;ol>
&lt;li>&lt;a href="#the-old-way">The Old Way&lt;/a>&lt;/li>
&lt;li>&lt;a href="#direnv">Direnv&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#what-is-direnv-and-how-it-works">What is direnv and how it works&lt;/a>&lt;/li>
&lt;li>&lt;a href="#direnv-installation">direnv installation&lt;/a>&lt;/li>
&lt;li>&lt;a href="#shell-configuration">Shell configuration&lt;/a>&lt;/li>
&lt;li>&lt;a href="#how-python-works-with-direnv">How Python works with direnv&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#pyenv">Pyenv&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#installation-and-configuration">Installation and Configuration&lt;/a>&lt;/li>
&lt;li>&lt;a href="#use-pyenv-with-direnv">Use pyenv with direnv&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#poetry">Poetry&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#what-is-poetry">What is Poetry&lt;/a>&lt;/li>
&lt;li>&lt;a href="#poetry-installation">Poetry installation&lt;/a>&lt;/li>
&lt;li>&lt;a href="#poetry-shell-configuration">Shell configuration&lt;/a>&lt;/li>
&lt;li>&lt;a href="#new-project">New project&lt;/a>&lt;/li>
&lt;li>&lt;a href="#existing-project">Existing project&lt;/a>&lt;/li>
&lt;li>&lt;a href="#poetry-usage">Poetry usage&lt;/a>&lt;/li>
&lt;li>&lt;a href="#link-poetry-with-direnv">Link Poetry with direnv&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#gpg">GPG&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#generate-a-key">Generate a key&lt;/a>&lt;/li>
&lt;li>&lt;a href="#get-key-id">Get key ID&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#pass">Pass&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#pass-installation">Pass installation&lt;/a>&lt;/li>
&lt;li>&lt;a href="#pass-usage">Pass usage&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#tomb">Tomb&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#tomb-installation">Tomb installation&lt;/a>&lt;/li>
&lt;li>&lt;a href="#tomb-usage">Tomb usage&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#secrets-with-direnv-and-pass">Secrets with Direnv and Pass&lt;/a>&lt;/li>
&lt;li>&lt;a href="#direnv-advanced-configurations">Direnv advanced configurations&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#check-for-commands-dependencies">Check for commands dependencies&lt;/a>&lt;/li>
&lt;li>&lt;a href="#third-party-binaries">Third-party binaries&lt;/a>&lt;/li>
&lt;li>&lt;a href="#third-party-configs">Third-party configs&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#final-template">Final template&lt;/a>&lt;/li>
&lt;li>&lt;a href="#conclusion">Conclusion&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>Disclaimer: I&amp;rsquo;m not saying &lt;code>virtualenv&lt;/code> methods are bad.&lt;/p></description></item><item><title>Bring Your Own Image</title><link>https://lebaron.sh/p/bring-your-own-image/</link><pubDate>Mon, 20 Jul 2020 12:00:00 +0000</pubDate><guid>https://lebaron.sh/p/bring-your-own-image/</guid><description>&lt;p>When I was working at &lt;strong>OVHCloud&lt;/strong> company, I&amp;rsquo;ve developed a feature called &lt;strong>BYOI&lt;/strong> (Bring Your Own Image).&lt;/p>
&lt;p>&lt;strong>Bring Your Own Image&lt;/strong> technology allows you to boot any cloud (or not) images on a baremetal.&lt;/p>
&lt;p>Even if today not all editors are ready to provide completely agnostic images (and I mean &lt;strong>UEFI&lt;/strong> ready and/or &lt;strong>legacy boot&lt;/strong>), by triturating (&lt;strong>packer&lt;/strong>) a bit the whole, we can have something functional.&lt;/p>
&lt;p>This mark the first step towards the &lt;strong>Hybrid IAC&lt;/strong>.&lt;/p></description></item><item><title>Random wallpaper with AwesomeWM !</title><link>https://lebaron.sh/p/random-wallpaper-with-awesomewm/</link><pubDate>Fri, 10 Jan 2020 11:10:33 +0000</pubDate><guid>https://lebaron.sh/p/random-wallpaper-with-awesomewm/</guid><description>&lt;p>I&amp;rsquo;ve been looking for a way to break my routine a bit when I&amp;rsquo;m working on my laptop. I figured that changing the wallpaper randomly and automatically was a good way to break the monotony.&lt;/p>
&lt;p>I use awesomeWM (version 4)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[f00b@void ~]$ awesome --version
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">awesome v4.3 (Too long)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> • Compiled against Lua 5.3.5 (running with Lua 5.3)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> • D-Bus support: ✔
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> • execinfo support: ✘
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> • xcb-randr version: 1.6
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> • LGI version: 0.9.2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>So I needed three things:&lt;/p></description></item><item><title>Freebsd Pci Disk Space</title><link>https://lebaron.sh/p/freebsd-pci-disk-space/</link><pubDate>Sun, 04 Mar 2018 14:56:33 +0000</pubDate><guid>https://lebaron.sh/p/freebsd-pci-disk-space/</guid><description>&lt;p>When you create an OVH Public Cloud instance under Freebsd with a certain amount of disk space, let’s say 50G, you will find that it is not applied on your partition.&lt;/p>
&lt;p>First let&amp;rsquo;s look at what we have:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># gpart show
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">=&amp;gt; 40 10239920 da0 GPT (50G) [CORRUPT]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 40 1024 1 freebsd-boot (512K)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 1064 984 - free - (492K)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 2048 10235904 2 freebsd-zfs (4.9G)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 10237952 2008 - free - (1.0M)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>We note that our volume da0 is tagged as CORRUPT. Don&amp;rsquo;t panic, everyone knows that the Freebsd handbook is great. I quote:&lt;/p></description></item><item><title>Ubuntu Vrack Ovh Fix</title><link>https://lebaron.sh/p/ubuntu-vrack-ovh-fix/</link><pubDate>Sun, 04 Mar 2018 14:41:25 +0000</pubDate><guid>https://lebaron.sh/p/ubuntu-vrack-ovh-fix/</guid><description>&lt;p>You may have noticed it, but when you populate a PCI OVH instance under Ubuntu by activating Vrack, your Vm does not have its private IP at boot time.
So, yes, I don&amp;rsquo;t like Ubuntu, but sometimes you don&amp;rsquo;t have a choice.&lt;/p>
&lt;p>Anyway, all this to say that we don&amp;rsquo;t have our private IP and it&amp;rsquo;s too sad. (RT)&lt;/p>
&lt;p>The fix trick is stupid.
Very stupid.&lt;/p>
&lt;p>Add:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">allow-hotplug ens4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">iface ens4 inet dhcp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In &lt;code>/etc/network/interface&lt;/code> file.&lt;/p></description></item><item><title>Add Gitlab Registry in Kubernetes</title><link>https://lebaron.sh/p/add-gitlab-registry-in-kubernetes/</link><pubDate>Thu, 10 Aug 2017 12:06:05 +0000</pubDate><guid>https://lebaron.sh/p/add-gitlab-registry-in-kubernetes/</guid><description>&lt;p>Now that Gitlab offers its own image registry, it is possible to use it directly in our K8s environment!
If you missed the info (which is starting to date now), I refer you to &lt;a href="https://about.gitlab.com/2016/05/23/gitlab-container-registry/">this article&lt;/a>.&lt;/p>
&lt;p>To add the Gitlab private registry in Kubernetes you have to create a secret :&lt;/p>
&lt;pre>&lt;code>&amp;gt; kubectl create secret docker-registry regsecret --docker-server=registry.gitlab.xyz --docker-username='' --docker-password='' --docker-email=&amp;quot;&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>Where :&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">--docker-server regitry gitlab
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--docker-username user gitlab autorisé à acceder au registry
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--docker-password son mot de passe
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--docker-email son email
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>We will check secret creation :&lt;/p></description></item><item><title>Dockerize Nova client</title><link>https://lebaron.sh/p/dockerize-nova-client/</link><pubDate>Tue, 08 Aug 2017 13:52:07 +0000</pubDate><guid>https://lebaron.sh/p/dockerize-nova-client/</guid><description>&lt;p>With OVH Public Cloud, it is possible for you to control your OpenStack instances directly from the Nova client.&lt;/p>
&lt;p>It is rather practical to go through the command line rather than having to access the manager which is often, let us say it, slow.&lt;/p>
&lt;p>But to avoid having to prepare each time a working environment compatible with Nova, I find more interesting to directly create a Docker image for this purpose.
In this way, no more need to install anything except the Docker daemon on its workstation.&lt;/p></description></item><item><title>Setup Rancher cluster on OVH Public Cloud</title><link>https://lebaron.sh/p/setup-rancher-cluster-on-ovh-public-cloud/</link><pubDate>Fri, 04 Aug 2017 19:04:11 +0000</pubDate><guid>https://lebaron.sh/p/setup-rancher-cluster-on-ovh-public-cloud/</guid><description>&lt;p>&lt;img src="https://lebaron.sh/Images/rancher_logo.jpeg" alt="Rancher logo">&lt;/p>
&lt;p>The world of hosting is changing, and so is the world of application development. Today we are turning less and less to dedicated hosting for a single application, but more to build the infrastructure that will support it.&lt;/p>
&lt;p>In this sense, we prefer to use an Iaas solution on dedicated &amp;ldquo;bare metal&amp;rdquo; for our application overlay than pure &amp;ldquo;bare metal&amp;rdquo; per service.&lt;/p>
&lt;p>Application deployment missions pushed by developers must fit with the technology and logic of production. Which &lt;code>pipelines&lt;/code> should we use for our &lt;code>CI&lt;/code>, &lt;code>CD&lt;/code> ?&lt;/p></description></item><item><title>Online servers availability</title><link>https://lebaron.sh/p/online-servers-availability/</link><pubDate>Tue, 01 Aug 2017 09:40:07 +0000</pubDate><guid>https://lebaron.sh/p/online-servers-availability/</guid><description>&lt;p>We need servers at Online, but there is no availability!
So they came to ask me if I didn&amp;rsquo;t have a magic solution&amp;hellip;&lt;/p>
&lt;p>A little &lt;code>bash&lt;/code>&amp;hellip; a &lt;code>notify&lt;/code> in this case &lt;code>Slack&lt;/code> and here we go!&lt;br>
As usual &lt;a href="https://github.com/lebarondecharlus/OnlineSrvDispo">sources are available&lt;/a>.&lt;/p>
&lt;h4 id="dirty-way">Dirty way&lt;/h4>
&lt;p>*To be alerted via slack you have to create an &lt;a href="https://my.slack.com/services/new/incoming-webhook/">incoming-webhook&lt;/a> which will generate a link.&lt;/p>
&lt;p>For an XC 2016 series server:&lt;/p>
&lt;pre>&lt;code>text=&amp;quot;DISPO : https://www.online.net/fr/serveur-dedie/dedibox-xc&amp;quot;; json=&amp;quot;{\&amp;quot;channel\&amp;quot;: \&amp;quot;#infra\&amp;quot;, \&amp;quot;text\&amp;quot;: \&amp;quot;$text\&amp;quot;}&amp;quot; ; while true ; do curl --silent https://www.online.net/fr/serveur-dedie | grep '&amp;lt;button class=&amp;quot;btn btn--primary js-order-dedibox&amp;quot;' | grep -i 'xc 2016' | grep -i 'victime' || curl -s -d &amp;quot;payload=$json&amp;quot; &amp;quot;https://hooks.slack.com/services/XXX/XXXX/XXXX/XXXX&amp;quot; ; sleep 5 ; done 
&lt;/code>&lt;/pre>
&lt;p>Curl will be done only if one server is available.&lt;/p></description></item><item><title>Migrate Openvz To Lxc</title><link>https://lebaron.sh/p/migrate-openvz-to-lxc/</link><pubDate>Mon, 31 Jul 2017 18:15:50 +0000</pubDate><guid>https://lebaron.sh/p/migrate-openvz-to-lxc/</guid><description>&lt;p>I recently had to migrate containers from a proxmox3 (under OpenVZ) to a proxmox4 (under LXC).&lt;/p>
&lt;p>Problem, there are a lot of containers to migrate/&amp;ldquo;convert&amp;rdquo; to run under LXC. So I needed a way to automate the procedure as much as possible.&lt;/p>
&lt;p>Luckily, the &lt;a href="https://pve.proxmox.com/wiki/Convert_OpenVZ_to_LXC">migration documentation&lt;/a> is very well detailed. So I used it to &amp;ldquo;bash&amp;rdquo; the operation.&lt;/p>
&lt;p>You can find all the sources on my &lt;a href="https://github.com/lebarondecharlus/vz2lxc">github&lt;/a>&lt;/p>
&lt;p>I cut the operation under two scripts, an export script and an import script.&lt;/p></description></item><item><title>Additional Volume Public Cloud Ovh</title><link>https://lebaron.sh/p/additional-volume-public-cloud-ovh/</link><pubDate>Mon, 31 Jul 2017 11:38:18 +0000</pubDate><guid>https://lebaron.sh/p/additional-volume-public-cloud-ovh/</guid><description>&lt;p>123 To add an additional disk/volume on your OVH public cloud, you need to follow some steps.&lt;/p>
&lt;p>First, identify your new disk :&lt;/p>
&lt;pre>&lt;code>fdisk -l
&lt;/code>&lt;/pre>
&lt;p>You can have different output depending of your system (&lt;code>sd{x}&lt;/code>, &lt;code>vd{x}&lt;/code>).&lt;/p>
&lt;p>Then create a new partition :&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># parted /dev/{{disk}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mktable gpt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mkpart primary ext4 512 100%
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">quit
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Format it :&lt;/p>
&lt;pre>&lt;code>mkfs -t ext4 -L rootfs /dev/{{disk}}1
&lt;/code>&lt;/pre>
&lt;p>Mount :&lt;/p>
&lt;pre>&lt;code>mount /dev/{{disk}}1 /mnt
&lt;/code>&lt;/pre>
&lt;p>Let’s make it peristent, we need &lt;strong>UUID&lt;/strong>.
To get block ID.&lt;/p></description></item><item><title>Galera Monitoring</title><link>https://lebaron.sh/p/galera-monitoring/</link><pubDate>Sun, 30 Jul 2017 15:08:41 +0000</pubDate><guid>https://lebaron.sh/p/galera-monitoring/</guid><description>&lt;p>Monitoring a database in standalone mode is one thing, but when it comes to clustering, it&amp;rsquo;s a little more complex.&lt;/p>
&lt;p>This is the case with Galera clustering (mariaDB/mysql). Zabbix (&amp;amp;co) offered me simple solutions for single database servers, but I didn&amp;rsquo;t find a really interesting template for monitoring a Galera cluster for production.&lt;/p>
&lt;p>So several questions, what to monitor, how to alert, what&amp;rsquo;s the best method?&lt;/p>
&lt;p>I based myself on &lt;a href="http://galeracluster.com/documentation-webpages/monitoringthecluster.html">the official Galera documentation&lt;/a> to have all the important elements to monitor.
For the choice of the Golang language, it seemed to me that it provided me with the necessary functionalities.
As for the choice of alerting, I decided to use a Slack App.&lt;/p></description></item><item><title>Update Proxmox templates</title><link>https://lebaron.sh/p/update-proxmox-templates/</link><pubDate>Sun, 30 Jul 2017 14:53:16 +0000</pubDate><guid>https://lebaron.sh/p/update-proxmox-templates/</guid><description>&lt;p>To automatically update the list of templates available via prox in your local space just use the following command:&lt;/p>
&lt;pre>&lt;code>pveam update
&lt;/code>&lt;/pre>
&lt;p>I found it good to put it in cron once a week so as not to have too much space for minor versions.&lt;/p></description></item><item><title>Event Watcher Manager Python3</title><link>https://lebaron.sh/p/event-watcher-manager-python3/</link><pubDate>Sun, 30 Jul 2017 12:53:16 +0000</pubDate><guid>https://lebaron.sh/p/event-watcher-manager-python3/</guid><description>&lt;p>On one specific request, I had to work on the elaboration of an automating program reacting on SFTP users updates.&lt;br>
The main technical issue of this request is that the SFTP protocol does not have a logging system.&lt;/p>
&lt;p>I had heard about &lt;a href="https://github.com/seb-m/pyinotify/blob/master/python3/pyinotify.py">the pyinotify library&lt;/a> so I started working on it.&lt;br>
&lt;strong>The project is presented in its primary mechanism&lt;/strong>, for more details, I invite you to read the sources.&lt;/p>
&lt;h4 id="technical-requests-concerning-the-project">Technical requests concerning the project&lt;/h4>
&lt;p>Details of the context of realization :
&lt;/u>Details of the context of realization :&lt;/u>.&lt;br>
The program must monitor SFTP user actions. These users have their HomeDir which are NFS mounts.&lt;br>
The user can upload anything to his account, but the program must detect video uploads (in some formats) and then perform a series of successive actions.&lt;/p></description></item></channel></rss>